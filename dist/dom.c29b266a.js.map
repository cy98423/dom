{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.c29b266a.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n  create(string) {\r\n    const container = document.createElement(\"template\");\r\n    container.innerHTML = string.trim(); //消除前后空格,不然会获取到文本\r\n    return container.content.firstChild;\r\n  },\r\n  after(node, node2) {\r\n    node.parentNode.insertBefore(node2, node.nextSibling);\r\n    //找到节点的爸爸,把节点查到node下一个节点的前面\r\n  },\r\n  before(node, node2) {\r\n    node.parentNode.insertBefore(node2, node);\r\n  },\r\n  append(parent, node) {\r\n    parent.appendChild(node);\r\n  },\r\n  wrap(node, parent) {\r\n    dom.before(node, parent); //把新节点放到目标节点前面\r\n    dom.append(parent, node); //把目标节点放到新节点里面\r\n  },\r\n  remove(node) {\r\n    node.parentNode.removeChild(node);\r\n    return node;\r\n  },\r\n  empty(node) {\r\n    //const { childNodes } = node;\r\n    //const childNodes = node.childNodes\r\n    const array = [];\r\n    let x = node.firstChild;\r\n    while (x) {\r\n      array.push(dom.remove(node.firstChild));\r\n      x = node.firstChild;\r\n    }\r\n  },\r\n  attr(node, name, value) {\r\n    //重载\r\n    if (arguments.length === 3) {\r\n      node.setAttribute(name, value); //修改\r\n    } else if (arguments.length === 2) {\r\n      return node.getAttribute(name); //读取属性\r\n    }\r\n  },\r\n  text(node, string) {\r\n    if (arguments.length === 2) {\r\n      if (\"innerText\" in node) {\r\n        node.innerText = string; //ie\r\n      } else {\r\n        node.textContent = string;\r\n      }\r\n    } else if (arguments.length === 1) {\r\n      if (\"innerText\" in node) {\r\n        return node.innerText;\r\n      } else {\r\n        return node.textContent;\r\n      }\r\n    }\r\n  },\r\n  html(node, string) {\r\n    if (arguments.length === 2) {\r\n      node.innerHTML = string;\r\n    } else if (arguments.length === 1) {\r\n      return node.innerHTML;\r\n    }\r\n  },\r\n  style(node, name, value) {\r\n    if (arguments.length === 3) {\r\n      //dom.style(div,'color','red')\r\n      node.style[name] = value;\r\n    } else if (arguments.length === 2) {\r\n      if (typeof name === \"string\") {\r\n        //dom.style(div,'color')\r\n        return node.style[name];\r\n      } else if (name instanceof Object) {\r\n        //dom.style(div,{color:'red'})\r\n        for (let key in name) {\r\n          node.style[key] = name[key];\r\n        }\r\n      }\r\n    }\r\n  },\r\n  class: {\r\n    add(node, className) {\r\n      node.classList.add(className);\r\n    },\r\n    remove(node, className) {\r\n      node.classList.remove(className);\r\n    },\r\n    has(node, className) {\r\n      return node.classList.contains(className);\r\n    },\r\n  },\r\n  on(node, eventName, fn) {\r\n    node.addEventListener(eventName, fn);\r\n  },\r\n  off(node, eventName, fn) {\r\n    node.removeEventListener(eventName, fn);\r\n  },\r\n  find(selector, scope) {\r\n    return (scope || document).querySelectorAll(selector);\r\n    //如果有scope就在scope里面找\r\n    //如果没有,就在document里面找\r\n  },\r\n  parent(node) {\r\n    return node.parentNode;\r\n  },\r\n  children(node) {\r\n    return node.children;\r\n  },\r\n  siblings(node) {\r\n    Array.from(node.parentNode.children).filter((n) => n !== node);\r\n  },\r\n  next(node) {\r\n    let x = node.nextSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.nextSibling;\r\n    }\r\n    return x;\r\n  },\r\n  previous(node) {\r\n    let x = node.previousSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.previousSibling;\r\n    }\r\n    return x;\r\n  },\r\n  each(nodeList, fn) {\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n      fn.call(null, nodeList[i]);\r\n    }\r\n  },\r\n  index(node) {\r\n    const list = dom.children(node.parentNode);\r\n    let i;\r\n    for (i = 0; i < list.length; i++) {\r\n      if (list[i] === node) {\r\n        break;\r\n      }\r\n    }\r\n    return i;\r\n  },\r\n};\r\n"]}